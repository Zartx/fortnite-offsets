struct FNRot
{
    double a;
    char pad_0008[24];
    double b;
    char pad_0028[424];
    double c;
};

struct CameraDescription
{
    Vector3 location;
    Vector3 rotation;
    float fov;
};

FNRot readFNRot(uintptr_t rotation_pointer)
{
    FNRot fnRot;
    fnRot.a = read<double>(rotation_pointer);
    fnRot.b = read<double>(rotation_pointer + 0x20);
    fnRot.c = read<double>(rotation_pointer + 0x1d0);
    return fnRot;
}

CameraDescription get_camera()
{
    CameraDescription camera;
    auto location_pointer = read<uintptr_t>(Uworld + 0x110);
    auto rotation_pointer = read<uintptr_t>(Uworld + 0x120);

    camera.location = read<Vector3>(location_pointer);
    FNRot fnRot = readFNRot(rotation_pointer);
    
    camera.rotation.x = asin(fnRot.c) * (180.0 / M_PI);
    camera.rotation.y = -atan2(fnRot.a * -1, fnRot.b) * (180.0 / M_PI);
    camera.fov = read<float>((uintptr_t)PlayerController + 0x394) * 90.f;

    return camera;
}
